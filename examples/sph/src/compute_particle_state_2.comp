#version 450
layout(local_size_x = 256) in;

#extension GL_GOOGLE_include_directive : enable

struct Vec3Wrapper {
    vec3 data;
};

struct CellInfo {
    uint left;
    uint right;
};

// THESE SHOULD BE SORTED
layout(set = 0, binding = 0) readonly buffer InputDensities {
    double input_densities[];
};

layout(set = 0, binding = 1) readonly buffer InputPositions {
    Vec3Wrapper input_positions[];
};

layout(set = 0, binding = 2) readonly buffer InputPressures {
    double input_pressures[];
};

layout(set = 0, binding = 3) readonly buffer FlatCells {
    CellInfo flat_cells[];
};

layout(set = 0, binding = 4) buffer PressureForces {
    Vec3Wrapper pressure_forces[];
};

layout(push_constant) uniform Params {
    uint nBits;
    uint nParticles;
    vec3 domainMin;
    vec3 domainMax;
    int d;
} pc;

#include "morton_kernels.comp.kern"
#include "kernels.comp.kern"
#include "nbr_kernel.comp.kern"

void main() {
    uint idx = gl_GlobalInvocationID.x;

    vec3 pos = input_positions[idx].data;
    uvec3 ijk = xyz2ijk(pos, pc.nBits);
    uint flat_key = ijk2ak(ijk, pc.nBits);

    CellInfo cell = flat_cells[flat_key];

    int d = pc.d;
    uint maxg = 1 << pc.nBits;

    CellInfo neighborCells[MAX_CELLS];
    uint cellCount;
    gather_neighbor_cells(ijk, d, maxg, neighborCells, cellCount);
    double h = 1.0 / double(1 << pc.nBits);

    vec3 pressure_force = vec3(0.0, 0.0, 0.0);
    // now consume neighbors
    for (uint c = 0u; c < cellCount; ++c) {
        CellInfo cell = neighborCells[c];
        for (uint i = cell.left; i < cell.right; ++i) {
            vec3 dv = input_positions[i].data - pos;
            double dist = length(dv);
            vec3 gradw = debrun_spiky_kernel_grad(dv, h);
            pressure_force += cal_pressure_force_ij(
                gradw,
                input_pressures[idx],
                input_pressures[i],
                input_densities[idx], 
                input_densities[i],
                h
            );
        }
    }
    pressure_forces[idx].data = pressure_force;

}