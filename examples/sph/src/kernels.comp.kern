// Constants
const double PI = 3.14159265359;
const double D15 = 15.0;
const double D6 = 6.0;
const double MINDIST = 1e-6;

double get_debrun_coeff_3D(double h) {
    double hp6 = h * h * h * h * h * h;
    return D15 / (PI * hp6);
}

double debrun_spiky_kernel(double r, double h) {
    double coeff = get_debrun_coeff_3D(h);
    double hmr = h-r;
    double hmr_pow3 = hmr * hmr * hmr;
    double val = coeff * hmr_pow3;
    double mask = step(0.0, r) * step(r, h); // 1.0 if 0 <= r <= h, else 0.0
    return val * mask;
}

double debrun_spiky_kernel_dwdr(double r, double h) {
    double coeff = get_debrun_coeff_3D(h) / h;
    double hmr = h-r;
    double hmr_pow2 = hmr * hmr;
    double val = -3.0 * coeff * hmr_pow2;
    double mask = step(0.0, r) * step(r, h);
    return val * mask;
}

double debrun_spiky_kernel_lap(double r, double h) {
    double mask = step(0.0, r) * step(r, h); // 1.0 if 0 <= r <= h, else 0.0
    double coeff = D6 * get_debrun_coeff_3D(h);
    double term1 = coeff * (h - r);          // W''(r)
    double term2 = - coeff * (h - r) * (h - r) / r;  // (2/r) * W'(r)
    return mask * (term1 + term2);
}

dvec3 debrun_spiky_kernel_grad(dvec3 dv, double h) {
    double r = length(dv);
    double safe_r = max(r, MINDIST); // avoid divide-by-zero
    double dwdror = debrun_spiky_kernel_dwdr(r, h) / safe_r;
    return dv * dwdror;
}

double cal_pressure_wcsph(double rho, double rho0, double c2, int gamma) {
    // bweak is a constant for this call
    double bweak = c2 * rho0 / double(gamma);
    double prod = 1.0;
    for (int g = 0; g < gamma; ++g) {
        prod = prod * rho / rho0;
    }
    return bweak * (prod - 1.0f);
}

double cal_rho_ij(double mass, double dist_ij, double h) {
    // formula is mass * kernel, mass = 1.0
    return mass * debrun_spiky_kernel(dist_ij, h);
}

double cal_pressure_force_coefficient(double pi, double pj, double rhoi, double rhoj, double mj) {
    return ((pi / (rhoi * rhoi)) + (pj / (rhoj * rhoj))) * mj;
}

dvec3 cal_pressure_force_ij(dvec3 gradw, double pi, double pj, double rhoi, double rhoj, double mj) {
    double pforce_coefficient = cal_pressure_force_coefficient(pi, pj, rhoi, rhoj, mj);
    return -pforce_coefficient * gradw;
}

dvec3 adjust_boundary_vel(dvec3 prop_pos, dvec3 new_vel, dvec3 bmin, dvec3 bmax, double damping) {
    dvec3 adj_vel = new_vel;

    adj_vel.x *=  prop_pos.x <= bmin.x ? -1.0 : 1.0;
    adj_vel.y *=  prop_pos.y <= bmin.y ? -1.0 : 1.0;
    adj_vel.z *=  prop_pos.z <= bmin.z ? -1.0 : 1.0;

    adj_vel.x *=  prop_pos.x > bmax.x ? -1.0 : 1.0;
    adj_vel.y *=  prop_pos.y > bmax.y ? -1.0 : 1.0;
    adj_vel.z *=  prop_pos.z > bmax.z ? -1.0 : 1.0;

    return adj_vel;
}