// Constants
const double PI = 3.14159265359;
const double D15 = 15.0;
const double D6 = 6.0;

double get_debrun_coeff_3D(double h) {
    double hp6 = h * h * h * h * h * h;
    return D15 / (PI * hp6);
}

double debrun_spiky_kernel(double r, double h) {
    double coeff = get_debrun_coeff_3D(h);
    double hmr = h-r;
    double hmr_pow3 = hmr * hmr * hmr;
    double val = coeff * hmr_pow3;
    double mask = step(0.0, r) * step(r, h); // 1.0 if 0 <= r <= h, else 0.0
    return val * mask;
}

double debrun_spiky_kernel_dwdr(double r, double h) {
    double coeff = get_debrun_coeff_3D(h) / h;
    double hmr = h-r;
    double hmr_pow2 = hmr * hmr;
    double val = -3.0 * coeff * hmr_pow2;
    double mask = step(0.0, r) * step(r, h);
    return val * mask;
}

double debrun_spiky_kernel_lap(double r, double h) {
    double mask = step(0.0, r) * step(r, h); // 1.0 if 0 <= r <= h, else 0.0
    double coeff = D6 * get_debrun_coeff_3D(h);
    double term1 = coeff * (h - r);          // W''(r)
    double term2 = - coeff * (h - r) * (h - r) / r;  // (2/r) * W'(r)
    return mask * (term1 + term2);
}

vec3 debrun_spiky_kernel_grad(vec3 dv, float h) {
    float r = length(dv);
    float safe_r = max(r, 1e-6f); // avoid divide-by-zero
    double dwdror = debrun_spiky_kernel_dwdr(r, h) / safe_r;
    return dv * float(dwdror);
}

float cal_pressure_wcsph(float rho, float rho0, float c2, float gamma) {
    // bweak is a constant for this call
    float bweak = c2 * rho0 / gamma;
    return bweak * (pow(rho / rho0, gamma) - 1.0f);
}

float cal_rho_ij(float mass, float dist_ij, float h) {
    // formula is mass * kernel, mass = 1.0
    return mass * float(debrun_spiky_kernel(dist_ij, h));
}

float cal_pressure_force_coefficient(float pi, float pj, float rhoi, float rhoj, float mj) {
    return ((pi / (rhoi * rhoi)) + (pj / (rhoj * rhoj))) * mj;
}

vec3 cal_pressure_force_ij(vec3 gradw, float pi, float pj, float rhoi, float rhoj, float mj) {
    float pforce_coefficient = - pi * cal_pressure_force_coefficient(pi, pj, rhoi, rhoj, mj);
    return pforce_coefficient * gradw;
}
